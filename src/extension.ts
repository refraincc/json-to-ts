import * as vscode from "vscode";
import { convertJsonToTs } from "./jsonToTs";

type CodeInsertionMethod = "replace" | "newFile";

// 通用处理流程抽象
async function handleConversion(
  insertionMethod: CodeInsertionMethod,
  defaultInterfaceName = "AutoGenerated"
) {
  const editor = vscode.window.activeTextEditor;
  if (!editor) {
    vscode.window.showWarningMessage("请先打开文件并选中 JSON 内容");
    return;
  }

  const interfaceName = await getInterfaceName(defaultInterfaceName);
  if (interfaceName === undefined) return;

  try {
    const jsonText = editor.document.getText(editor.selection);
    const tsCode = convertJsonToTs(jsonText, interfaceName);
    
    await (insertionMethod === "replace" 
      ? replaceSelectionWithTs(editor, tsCode) 
      : createNewTsFile(tsCode));
    
    showSuccessFeedback(interfaceName);
  } catch (error) {
    handleConversionError(error);
  }
}

// 获取接口名称（带智能默认值）
async function getInterfaceName(defaultName: string): Promise<string | undefined> {
  const input = await vscode.window.showInputBox({
    placeHolder: "例如: UserProfile",
    prompt: "请输入接口名称",
    value: defaultName,
    validateInput: validateInterfaceName
  });

  if (input === undefined) {
    vscode.window.showInformationMessage("已取消转换");
  }
  return input;
}

// 命名规范校验
function validateInterfaceName(name: string): string | null {
  if (!name) return "接口名称不能为空";
  if (!/^[A-Za-z_$][\w$]*$/.test(name)) {
    return "名称必须符合 TypeScript 标识符规范";
  }
  return null;
}

// 替换选中内容
async function replaceSelectionWithTs(
  editor: vscode.TextEditor, 
  tsCode: string
): Promise<void> {
  await editor.edit(editBuilder => {
    editBuilder.replace(editor.selection, tsCode);
  });
  await vscode.commands.executeCommand("editor.action.formatDocument");
}

// 创建新文件
async function createNewTsFile(tsCode: string): Promise<void> {
  const document = await vscode.workspace.openTextDocument({
    content: tsCode,
    language: "typescript"
  });
  await vscode.window.showTextDocument(document);
}

// 统一错误处理
function handleConversionError(error: unknown): void {
  const message = error instanceof Error ? error.message : String(error);
  vscode.window.showErrorMessage(`转换失败: ${message}`);
}

// 成功反馈
function showSuccessFeedback(interfaceName: string): void {
  vscode.window.showInformationMessage(
    `成功生成接口: ${interfaceName}`,
    "查看文档" // 可添加额外操作
  ).then(selection => {
    if (selection === "查看文档") {
      vscode.env.openExternal(vscode.Uri.parse("https://example.com/docs"));
    }
  });
}

export function activate(context: vscode.ExtensionContext) {
  const commands = [
    {
      command: "jsonToTs.convert",
      handler: () => handleConversion("replace")
    },
    {
      command: "jsonToTs.newFile",
      handler: () => handleConversion("newFile")
    }
  ];

  commands.forEach(({ command, handler }) => {
    context.subscriptions.push(
      vscode.commands.registerCommand(command, handler)
    );
  });
}