export function convertJsonToTs(jsonText: string, interfaceName = 'AutoGenerated'): string {
  try {
    const jsonData = JSON.parse(jsonText);
    const interfaces: string[] = [];
    const mainInterface = generateInterface(interfaceName, jsonData, interfaces);
    return interfaces.concat(mainInterface).join('\n\n');
  } catch (error) {
    throw new Error('无效的 JSON 格式');
  }
}

function generateInterface(name: string, obj: any, interfaces: string[] = []): string {
  let output = `interface ${name} {\n`;

  for (const [key, value] of Object.entries(obj)) {
    const { type, nestedInterface } = getTypeWithNested(key, value, interfaces);
    output += `  ${key}: ${type};\n`;
    
    if (nestedInterface) {
      interfaces.unshift(nestedInterface); // 将嵌套接口放在前面
    }
  }

  output += '}';
  return output;
}

function getTypeWithNested(key: string, value: any, interfaces: string[]): { 
  type: string; 
  nestedInterface?: string 
} {
  // 处理数组类型
  if (Array.isArray(value)) {
    if (value.length === 0) return { type: 'any[]' };
    
    const element = value[0];
    const elementType = getTypeWithNested(key, element, interfaces);
    return {
      type: `${elementType.type}[]`,
      nestedInterface: elementType.nestedInterface
    };
  }

  // 处理对象类型
  if (typeof value === 'object' && value !== null) {
    const interfaceName = toPascalCase(key);
    const nestedInterface = generateInterface(interfaceName, value, interfaces);
    return {
      type: interfaceName,
      nestedInterface: nestedInterface
    };
  }

  // 基础类型
  return { type: typeof value };
}

// 转换为大驼峰命名（PascalCase）
function toPascalCase(str: string): string {
  return str
    .replace(/([-_][a-z])/gi, (group) => 
      group.toUpperCase()
           .replace('-', '')
           .replace('_', '')
    )
    .replace(/^[a-z]/, (firstChar) => firstChar.toUpperCase());
}